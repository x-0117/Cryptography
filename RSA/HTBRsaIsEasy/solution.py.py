# n1 = p * q
# n2 = q * z
# x = n1 * E + n2

# x = p * q * E + q * z = q * (p * E + z)
# q = gcd(n1, x)
# p = n1 // q

# x mod n1 = (n1 * E + n2) mod n1
# x mod n1 = (n1 * E) mod n1 + n2 mod n1
# x mod n1 = n2 mod n1

# if n2 < n1:
#     n2 = x        [Case: 1]
# else:
#     n2 = x + n1   [Case: 2]

from math import gcd
from Crypto.Util.number import long_to_bytes

n1 = 101302608234750530215072272904674037076286246679691423280860345380727387460347553585319149306846617895151397345134725469568034944362725840889803514170441153452816738520513986621545456486260186057658467757935510362350710672577390455772286945685838373154626020209228183673388592030449624410459900543470481715269
c1 = 92506893588979548794790672542461288412902813248116064711808481112865246689691740816363092933206841082369015763989265012104504500670878633324061404374817814507356553697459987468562146726510492528932139036063681327547916073034377647100888763559498314765496171327071015998871821569774481702484239056959316014064
c2 = 46096854429474193473315622000700040188659289972305530955007054362815555622172000229584906225161285873027049199121215251038480738839915061587734141659589689176363962259066462128434796823277974789556411556028716349578708536050061871052948425521408788256153194537438422533790942307426802114531079426322801866673
x = 601613204734044874510382122719388369424704454445440856955212747733856646787417730534645761871794607755794569926160226856377491672497901427125762773794612714954548970049734347216746397532291215057264241745928752782099454036635249993278807842576939476615587990343335792606509594080976599605315657632227121700808996847129758656266941422227113386647519604149159248887809688029519252391934671647670787874483702292498358573950359909165677642135389614863992438265717898239252246163

q = gcd(n1, x)
p = n1 // q
phi1 = (p - 1) * (q - 1)
e = 0x10001
d1 = pow(e, -1, phi1)

pt1 = pow(c1, d1, n1)
print(long_to_bytes(pt1))

n2_1 = x % n1
n2_2 = n2_1 + n1

z1 = n2_1 // q
z2 = n2_2 // q

phi2_1 = (q - 1) * (z1 - 1)
phi2_2 = (q - 1) * (z2 - 1)

d2_1 = pow(e, -1, phi2_1)
d2_2 = pow(e, -1, phi2_2)

pt2_1 = pow(c2, d2_1, n2_1)
pt2_2 = pow(c2, d2_2, n2_2)

print(long_to_bytes(pt2_1))
print(long_to_bytes(pt2_2))

# Clearly, case 1
# b'HTB{1_m1ght_h4v3_m3ss3d'
# b'_uP_jU$t_4_l1ttle_b1t?}'
# b'\x01\x1c`\x1aX\xc7\\\xdb\x99\x8e\xe0g;\x16\x9a0\xf1p\x80\xe6f7\x02\xd8\x01\xd3\xa4V\xf9\xd9]\xbc\xf3\x81\xc2\xfbQ\xdc\xc8\xc1e\x17\xd6\x01\xb8\xf2#\xa4\xdd\xe3m@\x83\x9a\xe4J"\xff?\xfb\xae\x9e\xa4|\x1b\xd0\x00\x083tA\xa5Qmi;\x19N\xb0\xd0\xb7\xa7Vd\xa9d\xbbj\xc4\xe1\x88,l\x95,\xc6\x0f\n\x1d\x1a\x90;\x8bK!\xa5mC0\x84\\\xe8x\xdb\xdeX\x8d\xd8\x00;UK\x1a\x1f\xed8\x86\x15\x11'