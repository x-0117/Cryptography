# -*- coding: utf-8 -*-
# On proceeding in the exact same manner as solution_easy.py
import math, time
from Crypto.Util.number import long_to_bytes
n = 51214772223826458947343903953001487476278631390021520449180482250318402223871910467589821176474724615270573620128351792442696435406924016685353662124634928276565604574767844305337546301974967758679072483930469188209450741154719808928273796360060047042981437882233649203901005093617276209822357002895662878141
e = 65537
c = 41328763458934302623886982279989290133391941143474825043156612786022747186181626092904440906629512249693098336428292454473471954816980834113337123971593864752166968333372184013915759408279871722264574280860701217968784830530130601590818131935509927605432477384634437968100579272192406391181345133757405127746
# D(C)
dc = 36121865463995782277296293158498110427613111962414238045946490101935688033022876541418793886469647898078579120189419552431787379541843120009675223060979171856818401470674058515557901674369835328155371791544935440499813846484080003978652786490718806523938327240659684439275298596339460595405316567186468069580

g = math.gcd(n, c)
# From http://factordb.com/ we get p
p = 16799713761391840501

qr = n // g

x = (dc // p ** 3) % qr

while True:
    # Found the solution for k = 0
    print(long_to_bytes((p ** 3 * x)>>(512 // 2)))
    x += qr
    time.sleep(1)


# flag{1_th1nk_1_m1ght_b3_squ4r3_fr33_1nt0l3r4nt}